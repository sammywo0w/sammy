from flask import Flask, request, send_file, jsonify
from pptx import Presentation
import os
import uuid
import re

app = Flask(__name__)

@app.route('/generate', methods=['POST'])
def generate_pptx():
    data = request.get_json()
    if not data:
        return jsonify({"error": "Invalid or missing JSON"}), 400

    template_path = "11Business Model Template.pptx"
    prs = Presentation(template_path)

    key_map = {
        "target_customers": "Target Customer",
        "value_proposition": "Value Proposition",
        "cost_drivers": "Cost driver",
        "revenue_drivers": "Revenue driver",
        "customer_channels": "Customer Channel",
        "resources": "Resource",
        "offering": "Offering",
        "customer_relationship": "Customer Relation",
        "partners": "Partner",
        "activities": "Activity",
        "model_name": "Business Model Name"
    }

    def replace_text_runs(slide, placeholder_base, replacements):
        for shape in slide.shapes:
            if not shape.has_text_frame:
                continue
            for paragraph in shape.text_frame.paragraphs:
                for run in paragraph.runs:
                    text = run.text
                    for i, item in enumerate(replacements, 1):
                        text = text.replace(f"<{placeholder_base} {i}>", item)
                    text = text.replace(f"<{placeholder_base}>", ", ".join(replacements))
                    run.text = text

    def replace_title(slide, model_name):
        for shape in slide.shapes:
            if not shape.has_text_frame:
                continue
            for paragraph in shape.text_frame.paragraphs:
                for run in paragraph.runs:
                    if "<Business Model Name>" in run.text:
                        run.text = run.text.replace("<Business Model Name>", model_name)

    def clean_unused_placeholders(slide):
        for shape in slide.shapes:
            if not shape.has_text_frame:
                continue

            old_paragraphs = shape.text_frame.paragraphs
            title_paragraph = old_paragraphs[0]
            title_runs = title_paragraph.runs

            new_paragraphs = []

            # Сохраняем заголовок, если в нём нет плейсхолдеров
            if not any("<" in run.text and ">" in run.text for run in title_runs):
                new_paragraphs.append(title_paragraph)

            # Очищаем абзацы от плейсхолдеров
            for paragraph in list(old_paragraphs)[1:]:
                text = "".join(run.text for run in paragraph.runs)
                if not re.search(r"<[^>]+>", text):
                    new_paragraphs.append(paragraph)

            # Если были удалены абзацы — пересобираем блок
            if len(new_paragraphs) != len(old_paragraphs):
                text_frame = shape.text_frame
                text_frame.clear()

                # Заголовок
                title_p = text_frame.paragraphs[0]
                for run in title_runs:
                    r = title_p.add_run()
                    r.text = run.text
                    if run.font:
                        r.font.size = run.font.size
                        r.font.name = run.font.name
                        r.font.bold = run.font.bold
                        if run.font.color and run.font.color.rgb:
                            r.font.color.rgb = run.font.color.rgb

                # Остальные параграфы с буллетами
                for p in new_paragraphs[1:]:
                    para = text_frame.add_paragraph()
                    para.level = 0
                    for run in p.runs:
                        r = para.add_run()
                        r.text = run.text
                        if run.font:
                            r.font.size = run.font.size
                            r.font.name = run.font.name
                            r.font.bold = run.font.bold
                            if run.font.color and run.font.color.rgb:
                                r.font.color.rgb = run.font.color.rgb

    # Проходим по всем слайдам и заменяем
    for slide in prs.slides:
        for field, base_key in key_map.items():
            value = data.get(field, [])
            if not isinstance(value, list):
                value = [value]
            if field == "model_name":
                replace_title(slide, value[0] if value else "")
            else:
                replace_text_runs(slide, base_key, value)
        clean_unused_placeholders(slide)

    # Сохраняем и возвращаем
    filename = f"{uuid.uuid4().hex}.pptx"
    filepath = os.path.join("/tmp", filename)
    prs.save(filepath)

    return send_file(filepath, as_attachment=True, download_name="business_model_canvas.pptx")

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 5000)))

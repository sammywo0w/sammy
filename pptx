from flask import Flask, request, send_file, jsonify
from pptx import Presentation
from pptx.util import Pt
from pptx.enum.text import PP_ALIGN
import os
import uuid

app = Flask(__name__)

# Соответствие плейсхолдеров и ключей JSON
PLACEHOLDER_MAP = {
    "[Target Customers]": ("target_customers", "Target Customers"),
    "[Customer Channels]": ("customer_channels", "Customer Channels"),
    "[Value Proposition]": ("value_proposition", "Value Proposition"),
    "[Activities]": ("activities", "Activities"),
    "[Customer Relationship]": ("customer_relationship", "Customer Relationship"),
    "[Offerings]": ("offering", "Offering"),
    "[Partners]": ("partners", "Partners"),
    "[Revenue drivers]": ("revenue_drivers", "Revenue Drivers"),
    "[Cost drivers]": ("cost_drivers", "Cost Drivers"),
    "[Resources]": ("resources", "Resources"),
    "<Business Model Name>": ("model_name", None)
}

def apply_values_to_shape(shape, placeholder, values, title=None):
    if not shape.has_text_frame or placeholder not in shape.text:
        return

    shape.text_frame.clear()

    if title:
        p_title = shape.text_frame.paragraphs[0]
        p_title.text = title
        p_title.font.size = Pt(14)
        p_title.font.bold = True

    if isinstance(values, list):
        for val in values:
            p = shape.text_frame.add_paragraph()
            p.text = val
            p.level = 0
            p.font.size = Pt(12)
            p.font.bold = False
            p.alignment = PP_ALIGN.LEFT
            p.bullet = True
    else:
        p = shape.text_frame.add_paragraph()
        p.text = values
        p.font.size = Pt(14)
        p.alignment = PP_ALIGN.LEFT

@app.route('/generate', methods=['POST'])
def generate_pptx():
    data = request.get_json()
    if not data:
        return jsonify({"error": "Invalid or missing JSON"}), 400

    prs = Presentation("final Business Model Template.pptx")

    for slide in prs.slides:
        for shape in slide.shapes:
            if not shape.has_text_frame:
                continue
            for placeholder, (field_key, title) in PLACEHOLDER_MAP.items():
                if placeholder in shape.text:
                    apply_values_to_shape(shape, placeholder, data.get(field_key, []), title)

    filename = f"{uuid.uuid4().hex}.pptx"
    filepath = os.path.join("/tmp", filename)
    prs.save(filepath)
    return send_file(filepath, as_attachment=True, download_name="business_model_canvas.pptx")

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 5000)))
